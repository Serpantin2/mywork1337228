<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Буквоежка - Обмен книгами</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary: #4a6fa5;
            --secondary: #6b8cae;
            --accent: #e74c3c;
            --light: #f8f9fa;
            --dark: #343a40;
            --success: #28a745;
            --warning: #ffc107;
            --book-color: #8d6e63;
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background-color: #f5f7fa;
            color: var(--dark);
            line-height: 1.6;
            background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewBox="0 0 100 100"><rect width="100" height="100" fill="%23f5f7fa"/><path d="M20,20 L80,20 L80,80 L20,80 Z" fill="none" stroke="%23e0e0e0" stroke-width="1"/><path d="M25,25 L45,25 L45,45 L25,45 Z" fill="%23d1c4e9" opacity="0.2"/><path d="M55,35 L75,35 L75,55 L55,55 Z" fill="%23bbdefb" opacity="0.2"/></svg>');
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 20px;
        }
        
        header {
            background: linear-gradient(135deg, var(--primary), var(--secondary));
            color: white;
            padding: 15px 0;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            position: sticky;
            top: 0;
            z-index: 100;
        }
        
        .header-container {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .logo {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .logo-icon {
            font-size: 32px;
            color: white;
        }
        
        .logo h1 {
            font-size: 28px;
            font-weight: 700;
        }
        
        nav ul {
            display: flex;
            list-style: none;
            gap: 20px;
        }
        
        nav a {
            color: white;
            text-decoration: none;
            font-weight: 500;
            padding: 8px 12px;
            border-radius: 4px;
            transition: all 0.3s ease;
        }
        
        nav a:hover, nav a.active {
            background-color: rgba(255, 255, 255, 0.2);
        }
        
        .auth-buttons {
            display: flex;
            gap: 10px;
        }
        
        .btn {
            padding: 8px 16px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 8px;
        }
        
        .btn-primary {
            background-color: var(--book-color);
            color: white;
        }
        
        .btn-primary:hover {
            background-color: #7d5e53;
        }
        
        .btn-outline {
            background-color: transparent;
            border: 1px solid white;
            color: white;
        }
        
        .btn-outline:hover {
            background-color: white;
            color: var(--primary);
        }
        
        .btn-success {
            background-color: var(--success);
            color: white;
        }
        
        .btn-danger {
            background-color: var(--accent);
            color: white;
        }
        
        .page {
            display: none;
            min-height: calc(100vh - 160px);
            padding: 40px 0;
        }
        
        .page.active {
            display: block;
        }
        
        .page-title {
            font-size: 32px;
            margin-bottom: 30px;
            color: var(--primary);
            position: relative;
            padding-bottom: 15px;
            display: flex;
            align-items: center;
            gap: 15px;
        }
        
        .page-title::after {
            content: '';
            position: absolute;
            bottom: 0;
            left: 0;
            width: 70px;
            height: 4px;
            background-color: var(--book-color);
            border-radius: 2px;
        }
        
        .form-container {
            max-width: 800px;
            margin: 0 auto;
            background-color: white;
            padding: 30px;
            border-radius: 8px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
            color: var(--dark);
        }
        
        .form-control {
            width: 100%;
            padding: 12px 15px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 16px;
            transition: border 0.3s ease;
        }
        
        .form-control:focus {
            border-color: var(--book-color);
            outline: none;
            box-shadow: 0 0 0 3px rgba(141, 110, 99, 0.2);
        }
        
        .form-row {
            display: flex;
            gap: 20px;
        }
        
        .form-row .form-group {
            flex: 1;
        }
        
        .error-message {
            color: var(--accent);
            font-size: 14px;
            margin-top: 5px;
            display: none;
        }
        
        .books-bg {
            background-image: linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5)), url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewBox="0 0 100 100"><rect width="100" height="100" fill="%234a6fa5"/><rect x="20" y="20" width="20" height="60" rx="2" fill="%238d6e63"/><rect x="40" y="25" width="20" height="55" rx="2" fill="%236b8cae"/><rect x="60" y="30" width="20" height="50" rx="2" fill="%234a6fa5"/></svg>');
            background-size: cover;
            background-position: center;
            color: white;
            text-align: center;
            padding: 80px 20px;
            margin-bottom: 40px;
        }
        
        .hero-title {
            font-size: 48px;
            margin-bottom: 20px;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
        }
        
        .hero-subtitle {
            font-size: 22px;
            max-width: 700px;
            margin: 0 auto 30px;
        }
        
        .btn-large {
            padding: 14px 30px;
            font-size: 18px;
        }
        
        .cards-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 25px;
            margin-top: 30px;
        }
        
        .card {
            background-color: white;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
            transition: transform 0.3s ease;
            display: flex;
            flex-direction: column;
        }
        
        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
        }
        
        .card-header {
            background-color: var(--book-color);
            color: white;
            padding: 15px 20px;
            position: relative;
        }
        
        .card-type {
            position: absolute;
            top: 15px;
            right: 15px;
            background-color: rgba(255, 255, 255, 0.2);
            padding: 4px 10px;
            border-radius: 20px;
            font-size: 14px;
        }
        
        .card-body {
            padding: 20px;
            flex-grow: 1;
            display: flex;
            flex-direction: column;
        }
        
        .card-title {
            font-size: 20px;
            margin-bottom: 10px;
            color: var(--dark);
        }
        
        .card-author {
            color: var(--secondary);
            margin-bottom: 15px;
            font-style: italic;
        }
        
        .card-user {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-top: 15px;
            padding-top: 15px;
            border-top: 1px solid #eee;
            color: var(--dark);
        }
        
        .user-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background-color: var(--primary);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: bold;
        }
        
        .card-footer {
            padding: 15px 20px;
            background-color: #f8f9fa;
            border-top: 1px solid #eee;
            display: flex;
            justify-content: space-between;
        }
        
        .status {
            display: inline-block;
            padding: 5px 12px;
            border-radius: 20px;
            font-size: 14px;
            font-weight: 500;
        }
        
        .status-pending {
            background-color: rgba(255, 193, 7, 0.2);
            color: var(--warning);
        }
        
        .status-published {
            background-color: rgba(40, 167, 69, 0.2);
            color: var(--success);
        }
        
        .status-rejected {
            background-color: rgba(231, 76, 60, 0.2);
            color: var(--accent);
        }
        
        .status-archived {
            background-color: rgba(108, 117, 125, 0.2);
            color: var(--dark);
        }
        
        .admin-panel {
            background-color: white;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
        }
        
        .admin-table {
            width: 100%;
            border-collapse: collapse;
        }
        
        .admin-table th, .admin-table td {
            padding: 15px 20px;
            text-align: left;
            border-bottom: 1px solid #eee;
        }
        
        .admin-table th {
            background-color: var(--primary);
            color: white;
            font-weight: 600;
        }
        
        .admin-table tr:nth-child(even) {
            background-color: #f9f9f9;
        }
        
        .admin-table tr:hover {
            background-color: #f1f5f9;
        }
        
        .action-buttons {
            display: flex;
            gap: 8px;
            flex-wrap: wrap;
        }
        
        .btn-sm {
            padding: 6px 12px;
            font-size: 14px;
        }
        
        .tabs {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
            border-bottom: 1px solid #eee;
            padding-bottom: 10px;
        }
        
        .tab {
            padding: 8px 16px;
            cursor: pointer;
            border-radius: 4px;
            background-color: #f1f1f1;
            transition: all 0.3s ease;
        }
        
        .tab.active {
            background-color: var(--primary);
            color: white;
        }
        
        .rejection-reason {
            margin-top: 10px;
            padding: 10px;
            background-color: #fff8f8;
            border: 1px solid #ffdddd;
            border-radius: 4px;
            font-size: 14px;
        }
        
        footer {
            background: linear-gradient(135deg, var(--primary), var(--secondary));
            color: white;
            padding: 30px 0;
            margin-top: 40px;
        }
        
        .footer-content {
            display: flex;
            justify-content: space-between;
            flex-wrap: wrap;
            gap: 30px;
        }
        
        .footer-section {
            flex: 1;
            min-width: 250px;
        }
        
        .footer-section h3 {
            margin-bottom: 20px;
            color: white;
            font-size: 20px;
        }
        
        .footer-links {
            list-style: none;
        }
        
        .footer-links li {
            margin-bottom: 10px;
        }
        
        .footer-links a {
            color: rgba(255, 255, 255, 0.8);
            text-decoration: none;
            transition: color 0.3s ease;
        }
        
        .footer-links a:hover {
            color: white;
        }
        
        .copyright {
            text-align: center;
            padding-top: 20px;
            margin-top: 20px;
            border-top: 1px solid rgba(255, 255, 255, 0.1);
            color: rgba(255, 255, 255, 0.7);
        }
        
        @media (max-width: 768px) {
            .header-container {
                flex-direction: column;
                gap: 15px;
            }
            
            nav ul {
                flex-wrap: wrap;
                justify-content: center;
            }
            
            .form-row {
                flex-direction: column;
                gap: 0;
            }
            
            .hero-title {
                font-size: 36px;
            }
            
            .hero-subtitle {
                font-size: 18px;
            }
            
            .page-title {
                font-size: 28px;
            }
            
            .action-buttons {
                flex-direction: column;
            }
        }
    </style>
</head>
<body>
    <header>
        <div class="container header-container">
            <div class="logo">
                <div class="logo-icon"><i class="fas fa-book"></i></div>
                <h1>Буквоежка</h1>
            </div>
            
            <nav>
                <ul>
                    <li><a href="#" class="nav-link" data-page="home">Главная</a></li>
                    <li><a href="#" class="nav-link" data-page="cards">Мои карточки</a></li>
                    <li><a href="#" class="nav-link" data-page="new-card">Добавить карточку</a></li>
                    <li><a href="#" class="nav-link admin-link" data-page="admin">Админ-панель</a></li>
                </ul>
            </nav>
            
            <div class="auth-buttons">
                <button id="login-btn" class="btn btn-outline">Войти</button>
                <button id="register-btn" class="btn btn-primary">Регистрация</button>
                <button id="logout-btn" class="btn btn-outline" style="display: none;">Выйти</button>
            </div>
        </div>
    </header>
    
    <div class="books-bg">
        <div class="container">
            <h2 class="hero-title">Обменяй книгу и открой для себя новую!</h2>
            <p class="hero-subtitle">Найди книгу, которую давно искал, или поделись своей с другими читателями</p>
            <button id="hero-card-btn" class="btn btn-primary btn-large">Добавить карточку</button>
        </div>
    </div>
    
    <main class="container">
        <!-- Главная страница -->
        <section id="home-page" class="page active">
            <h2 class="page-title"><i class="fas fa-home"></i> Добро пожаловать на портал "Буквоежка"!</h2>
            <div class="form-container">
                <p>Наш портал создан для любителей чтения, которые хотят обмениваться книгами с другими читателями. Здесь вы можете найти книги, которые давно искали, или поделиться своими.</p>
                <br>
                <p><strong>Как это работает:</strong></p>
                <ol style="padding-left: 20px; margin-top: 10px;">
                    <li>Зарегистрируйтесь в системе</li>
                    <li>Создайте карточку книги, которой хотите поделиться или которую ищете</li>
                    <li>Администратор проверит и опубликует вашу карточку</li>
                    <li>Наслаждайтесь обменом книгами с другими читателями!</li>
                </ol>
                <br>
                <div class="form-row">
                    <button id="home-register-btn" class="btn btn-primary">Зарегистрироваться</button>
                    <button id="home-login-btn" class="btn btn-outline" style="color: var(--primary); border-color: var(--primary);">Войти в систему</button>
                </div>
            </div>
        </section>
        
        <!-- Страница регистрации -->
        <section id="register-page" class="page">
            <h2 class="page-title"><i class="fas fa-user-plus"></i> Регистрация в системе</h2>
            <div class="form-container">
                <form id="register-form">
                    <div class="form-row">
                        <div class="form-group">
                            <label for="fullname">ФИО</label>
                            <input type="text" id="fullname" class="form-control" placeholder="Иванов Иван Иванович">
                            <div class="error-message" id="fullname-error">ФИО должно содержать только кириллицу и пробелы</div>
                        </div>
                    </div>
                    
                    <div class="form-row">
                        <div class="form-group">
                            <label for="phone">Телефон</label>
                            <input type="tel" id="phone" class="form-control" placeholder="+7(999)-999-99-99">
                            <div class="error-message" id="phone-error">Введите телефон в формате +7(XXX)-XXX-XX-XX</div>
                        </div>
                        
                        <div class="form-group">
                            <label for="email">Email</label>
                            <input type="email" id="email" class="form-control" placeholder="example@mail.ru">
                            <div class="error-message" id="email-error">Введите корректный email</div>
                        </div>
                    </div>
                    
                    <div class="form-row">
                        <div class="form-group">
                            <label for="login">Логин</label>
                            <input type="text" id="login" class="form-control" placeholder="Не менее 6 символов">
                            <div class="error-message" id="login-error">Логин должен быть не менее 6 символов</div>
                        </div>
                    </div>
                    
                    <div class="form-row">
                        <div class="form-group">
                            <label for="password">Пароль</label>
                            <input type="password" id="password" class="form-control" placeholder="Не менее 6 символов">
                            <div class="error-message" id="password-error">Пароль должен быть не менее 6 символов</div>
                        </div>
                        
                        <div class="form-group">
                            <label for="confirm-password">Подтвердите пароль</label>
                            <input type="password" id="confirm-password" class="form-control">
                            <div class="error-message" id="confirm-password-error">Пароли не совпадают</div>
                        </div>
                    </div>
                    
                    <button type="submit" class="btn btn-primary">Зарегистрироваться</button>
                </form>
            </div>
        </section>
        
        <!-- Страница входа -->
        <section id="login-page" class="page">
            <h2 class="page-title"><i class="fas fa-sign-in-alt"></i> Вход в систему</h2>
            <div class="form-container">
                <form id="login-form">
                    <div class="form-group">
                        <label for="login-username">Логин</label>
                        <input type="text" id="login-username" class="form-control" placeholder="Введите ваш логин">
                    </div>
                    
                    <div class="form-group">
                        <label for="login-password">Пароль</label>
                        <input type="password" id="login-password" class="form-control" placeholder="Введите ваш пароль">
                    </div>
                    
                    <button type="submit" class="btn btn-primary">Войти</button>
                </form>
            </div>
        </section>
        
        <!-- Страница карточек пользователя -->
        <section id="cards-page" class="page">
            <h2 class="page-title"><i class="fas fa-address-card"></i> Мои карточки</h2>
            
            <div class="tabs" id="cards-tabs">
                <div class="tab active" data-status="all">Все карточки</div>
                <div class="tab" data-status="published">Опубликованные</div>
                <div class="tab" data-status="pending">На рассмотрении</div>
                <div class="tab" data-status="rejected">Отклонённые</div>
                <div class="tab" data-status="archived">Архивные</div>
            </div>
            
            <div class="cards-grid" id="cards-container">
                <!-- Карточки будут загружены через JavaScript -->
            </div>
        </section>
        
        <!-- Страница создания карточки -->
        <section id="new-card-page" class="page">
            <h2 class="page-title"><i class="fas fa-plus-circle"></i> Новая карточка книги</h2>
            <div class="form-container">
                <form id="card-form">
                    <div class="form-row">
                        <div class="form-group">
                            <label for="book-author">Автор книги</label>
                            <input type="text" id="book-author" class="form-control" placeholder="Например: Лев Толстой">
                        </div>
                    </div>
                    
                    <div class="form-row">
                        <div class="form-group">
                            <label for="book-title">Название книги</label>
                            <input type="text" id="book-title" class="form-control" placeholder="Например: Война и мир">
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <label>Тип карточки</label>
                        <div style="display: flex; gap: 20px; margin-top: 10px;">
                            <label style="display: flex; align-items: center; gap: 8px;">
                                <input type="radio" name="card-type" value="share" checked>
                                <span>Готов поделиться</span>
                            </label>
                            
                            <label style="display: flex; align-items: center; gap: 8px;">
                                <input type="radio" name="card-type" value="wish">
                                <span>Хочу в свою библиотеку</span>
                            </label>
                        </div>
                    </div>
                    
                    <button type="submit" class="btn btn-primary">Отправить на рассмотрение</button>
                </form>
            </div>
        </section>
        
        <!-- Админ-панель -->
        <section id="admin-page" class="page">
            <h2 class="page-title"><i class="fas fa-cog"></i> Панель администратора</h2>
            
            <div class="admin-panel">
                <table class="admin-table">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Автор</th>
                            <th>Название</th>
                            <th>Тип</th>
                            <th>Пользователь</th>
                            <th>Статус</th>
                            <th>Действия</th>
                        </tr>
                    </thead>
                    <tbody id="admin-cards">
                        <!-- Карточки для администратора будут загружены через JavaScript -->
                    </tbody>
                </table>
            </div>
        </section>
    </main>
    
    <footer>
        <div class="container">
            <div class="footer-content">
                <div class="footer-section">
                    <h3>О проекте</h3>
                    <p>"Буквоежка" - это портал для обмена книгами между любителями чтения. Мы помогаем находить новые книги и делиться своими с другими.</p>
                </div>
                
                <div class="footer-section">
                    <h3>Навигация</h3>
                    <ul class="footer-links">
                        <li><a href="#" class="nav-link" data-page="home">Главная</a></li>
                        <li><a href="#" class="nav-link" data-page="cards">Мои карточки</a></li>
                        <li><a href="#" class="nav-link" data-page="new-card">Добавить карточку</a></li>
                    </ul>
                </div>
                
                <div class="footer-section">
                    <h3>Контакты</h3>
                    <ul class="footer-links">
                        <li><i class="fas fa-envelope"></i> info@bookworm.ru</li>
                        <li><i class="fas fa-phone"></i> +7 (495) 123-45-67</li>
                        <li><i class="fas fa-map-marker-alt"></i> г. Москва, ул. Книжная, д. 15</li>
                    </ul>
                </div>
            </div>
            
            <div class="copyright">
                &copy; 2023 Портал "Буквоежка". Все права защищены.
            </div>
        </div>
    </footer>
    
    <!-- Модальное окно для отклонения карточки -->
    <div id="rejection-modal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); z-index: 1000; justify-content: center; align-items: center;">
        <div style="background-color: white; padding: 30px; border-radius: 8px; max-width: 500px; width: 100%;">
            <h3 style="margin-bottom: 20px;">Укажите причину отклонения</h3>
            <div class="form-group">
                <label for="rejection-reason">Причина отклонения</label>
                <textarea id="rejection-reason" class="form-control" rows="4" placeholder="Введите причину отклонения карточки..."></textarea>
            </div>
            <div style="display: flex; gap: 10px; margin-top: 20px;">
                <button id="confirm-rejection" class="btn btn-danger">Отклонить</button>
                <button id="cancel-rejection" class="btn btn-outline" style="border-color: var(--dark); color: var(--dark);">Отмена</button>
            </div>
        </div>
    </div>
    
    <script>
        // Эмуляция базы данных с использованием localStorage
        class Database {
            constructor() {
                this.usersKey = 'bookworm_users';
                this.cardsKey = 'bookworm_cards';
                this.currentUserKey = 'bookworm_current_user';
                this.adminUser = {
                    id: 0,
                    login: 'admin',
                    password: 'bookworm',
                    fullName: 'Администратор Системы',
                    phone: '+7(999)-999-99-99',
                    email: 'admin@bookworm.ru',
                    isAdmin: true
                };
                
                this.initialize();
            }
            
            initialize() {
                if (!localStorage.getItem(this.usersKey)) {
                    const users = [this.adminUser];
                    localStorage.setItem(this.usersKey, JSON.stringify(users));
                }
                
                if (!localStorage.getItem(this.cardsKey)) {
                    localStorage.setItem(this.cardsKey, JSON.stringify([]));
                }
            }
            
            // SQL: INSERT INTO users (login, password, fullName, phone, email) VALUES (?, ?, ?, ?, ?)
            registerUser(user) {
                const users = this.getUsers();
                
                // Проверка уникальности логина
                if (users.some(u => u.login === user.login)) {
                    throw new Error('Пользователь с таким логином уже существует');
                }
                
                user.id = this.getNextId(users);
                user.isAdmin = false;
                users.push(user);
                localStorage.setItem(this.usersKey, JSON.stringify(users));
                return user;
            }
            
            // SQL: SELECT * FROM users WHERE login = ? AND password = ?
            loginUser(login, password) {
                const users = this.getUsers();
                const user = users.find(u => u.login === login && u.password === password);
                
                if (!user) {
                    throw new Error('Неверный логин или пароль');
                }
                
                localStorage.setItem(this.currentUserKey, JSON.stringify(user));
                return user;
            }
            
            logoutUser() {
                localStorage.removeItem(this.currentUserKey);
            }
            
            getCurrentUser() {
                const user = localStorage.getItem(this.currentUserKey);
                return user ? JSON.parse(user) : null;
            }
            
            // SQL: INSERT INTO cards (userId, author, title, type, status) 
            // VALUES (?, ?, ?, ?, 'pending')
            createCard(card) {
                const cards = this.getCards();
                card.id = this.getNextId(cards);
                card.status = 'pending';
                card.createdAt = new Date().toISOString();
                
                cards.push(card);
                localStorage.setItem(this.cardsKey, JSON.stringify(cards));
                return card;
            }
            
            // SQL: SELECT * FROM cards WHERE userId = ?
            getUserCards(userId) {
                const cards = this.getCards();
                return cards.filter(card => card.userId === userId);
            }
            
            // SQL: SELECT * FROM cards
            getAllCards() {
                return this.getCards();
            }
            
            // SQL: UPDATE cards SET status = ?, rejectionReason = ? WHERE id = ?
            updateCardStatus(id, status, rejectionReason = '') {
                const cards = this.getCards();
                const card = cards.find(c => c.id === id);
                
                if (card) {
                    card.status = status;
                    if (rejectionReason) {
                        card.rejectionReason = rejectionReason;
                    }
                    localStorage.setItem(this.cardsKey, JSON.stringify(cards));
                    return true;
                }
                
                return false;
            }
            
            // SQL: UPDATE cards SET status = 'archived' WHERE id = ?
            archiveCard(id) {
                return this.updateCardStatus(id, 'archived');
            }
            
            // SQL: DELETE FROM cards WHERE id = ?
            deleteCard(id) {
                let cards = this.getCards();
                cards = cards.filter(card => card.id !== id);
                localStorage.setItem(this.cardsKey, JSON.stringify(cards));
            }
            
            getUsers() {
                return JSON.parse(localStorage.getItem(this.usersKey)) || [];
            }
            
            getCards() {
                return JSON.parse(localStorage.getItem(this.cardsKey)) || [];
            }
            
            getNextId(items) {
                return items.length > 0 ? Math.max(...items.map(i => i.id)) + 1 : 1;
            }
        }

        // Основной класс приложения
        class BookwormApp {
            constructor() {
                this.db = new Database();
                this.currentUser = null;
                this.currentRejectionCardId = null;
                this.init();
            }
            
            init() {
                this.checkAuth();
                this.setupEventListeners();
                this.showPage('home');
            }
            
            checkAuth() {
                this.currentUser = this.db.getCurrentUser();
                this.updateUI();
            }
            
            updateUI() {
                const isAuthenticated = !!this.currentUser;
                const isAdmin = isAuthenticated && this.currentUser.isAdmin;
                
                // Обновление видимости кнопок
                document.getElementById('login-btn').style.display = isAuthenticated ? 'none' : 'block';
                document.getElementById('register-btn').style.display = isAuthenticated ? 'none' : 'block';
                document.getElementById('logout-btn').style.display = isAuthenticated ? 'block' : 'none';
                
                // Обновление видимости элементов навигации
                document.querySelectorAll('.nav-link').forEach(link => {
                    const page = link.getAttribute('data-page');
                    if (page === 'admin') {
                        link.style.display = isAdmin ? 'block' : 'none';
                    } else if (page !== 'home') {
                        link.style.display = isAuthenticated ? 'block' : 'none';
                    }
                });
                
                // Обновление имени пользователя
                if (isAuthenticated) {
                    document.querySelector('.logo h1').innerHTML = `Буквоежка <small>(${this.currentUser.login})</small>`;
                } else {
                    document.querySelector('.logo h1').innerHTML = `Буквоежка`;
                }
            }
            
            setupEventListeners() {
                // Навигация
                document.querySelectorAll('.nav-link').forEach(link => {
                    link.addEventListener('click', (e) => {
                        e.preventDefault();
                        const page = link.getAttribute('data-page');
                        this.showPage(page);
                    });
                });
                
                // Кнопки авторизации
                document.getElementById('login-btn').addEventListener('click', () => this.showPage('login'));
                document.getElementById('register-btn').addEventListener('click', () => this.showPage('register'));
                document.getElementById('logout-btn').addEventListener('click', () => this.logout());
                document.getElementById('home-login-btn').addEventListener('click', () => this.showPage('login'));
                document.getElementById('home-register-btn').addEventListener('click', () => this.showPage('register'));
                document.getElementById('hero-card-btn').addEventListener('click', () => {
                    if (this.currentUser) {
                        this.showPage('new-card');
                    } else {
                        this.showPage('register');
                    }
                });
                
                // Форма регистрации
                document.getElementById('register-form').addEventListener('submit', (e) => {
                    e.preventDefault();
                    this.register();
                });
                
                // Форма входа
                document.getElementById('login-form').addEventListener('submit', (e) => {
                    e.preventDefault();
                    this.login();
                });
                
                // Форма создания карточки
                document.getElementById('card-form').addEventListener('submit', (e) => {
                    e.preventDefault();
                    this.createCard();
                });
                
                // Табы на странице карточек
                document.querySelectorAll('#cards-tabs .tab').forEach(tab => {
                    tab.addEventListener('click', () => {
                        document.querySelectorAll('#cards-tabs .tab').forEach(t => {
                            t.classList.remove('active');
                        });
                        tab.classList.add('active');
                        this.loadUserCards(tab.getAttribute('data-status'));
                    });
                });
                
                // Модальное окно отклонения
                document.getElementById('cancel-rejection').addEventListener('click', () => {
                    document.getElementById('rejection-modal').style.display = 'none';
                });
                
                document.getElementById('confirm-rejection').addEventListener('click', () => {
                    const reason = document.getElementById('rejection-reason').value;
                    if (!reason) {
                        alert('Пожалуйста, укажите причину отклонения');
                        return;
                    }
                    
                    this.db.updateCardStatus(this.currentRejectionCardId, 'rejected', reason);
                    document.getElementById('rejection-modal').style.display = 'none';
                    this.loadAdminCards();
                });
            }
            
            showPage(pageName) {
                // Скрыть все страницы
                document.querySelectorAll('.page').forEach(page => {
                    page.classList.remove('active');
                });
                
                // Показать запрошенную страницу
                document.getElementById(`${pageName}-page`).classList.add('active');
                
                // Обновить активную ссылку в навигации
                document.querySelectorAll('.nav-link').forEach(link => {
                    link.classList.remove('active');
                });
                
                document.querySelector(`.nav-link[data-page="${pageName}"]`)?.classList.add('active');
                
                // Загрузить данные для некоторых страниц
                if (pageName === 'cards' && this.currentUser) {
                    this.loadUserCards('all');
                }
                
                if (pageName === 'admin' && this.currentUser?.isAdmin) {
                    this.loadAdminCards();
                }
            }
            
            validateForm() {
                let isValid = true;
                
                // ФИО: кириллица и пробелы
                const fullname = document.getElementById('fullname').value;
                const fullnameRegex = /^[А-Яа-яЁё\s]+$/;
                if (!fullnameRegex.test(fullname)) {
                    document.getElementById('fullname-error').style.display = 'block';
                    isValid = false;
                } else {
                    document.getElementById('fullname-error').style.display = 'none';
                }
                
                // Телефон: +7(XXX)-XXX-XX-XX
                const phone = document.getElementById('phone').value;
                const phoneRegex = /^\+7\(\d{3}\)-\d{3}-\d{2}-\d{2}$/;
                if (!phoneRegex.test(phone)) {
                    document.getElementById('phone-error').style.display = 'block';
                    isValid = false;
                } else {
                    document.getElementById('phone-error').style.display = 'none';
                }
                
                // Email: стандартный формат
                const email = document.getElementById('email').value;
                const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                if (!emailRegex.test(email)) {
                    document.getElementById('email-error').style.display = 'block';
                    isValid = false;
                } else {
                    document.getElementById('email-error').style.display = 'none';
                }
                
                // Логин: минимум 6 символов
                const login = document.getElementById('login').value;
                if (login.length < 6) {
                    document.getElementById('login-error').style.display = 'block';
                    isValid = false;
                } else {
                    document.getElementById('login-error').style.display = 'none';
                }
                
                // Пароль: минимум 6 символов
                const password = document.getElementById('password').value;
                if (password.length < 6) {
                    document.getElementById('password-error').style.display = 'block';
                    isValid = false;
                } else {
                    document.getElementById('password-error').style.display = 'none';
                }
                
                // Подтверждение пароля
                const confirmPassword = document.getElementById('confirm-password').value;
                if (password !== confirmPassword) {
                    document.getElementById('confirm-password-error').style.display = 'block';
                    isValid = false;
                } else {
                    document.getElementById('confirm-password-error').style.display = 'none';
                }
                
                return isValid;
            }
            
            register() {
                if (!this.validateForm()) return;
                
                const user = {
                    login: document.getElementById('login').value,
                    password: document.getElementById('password').value,
                    fullName: document.getElementById('fullname').value,
                    phone: document.getElementById('phone').value,
                    email: document.getElementById('email').value
                };
                
                try {
                    const newUser = this.db.registerUser(user);
                    this.db.loginUser(newUser.login, newUser.password);
                    this.currentUser = newUser;
                    this.updateUI();
                    this.showPage('new-card');
                    alert('Регистрация прошла успешно! Теперь вы можете создать карточку книги.');
                } catch (error) {
                    alert(`Ошибка регистрации: ${error.message}`);
                }
            }
            
            login() {
                const login = document.getElementById('login-username').value;
                const password = document.getElementById('login-password').value;
                
                try {
                    const user = this.db.loginUser(login, password);
                    this.currentUser = user;
                    this.updateUI();
                    this.showPage('cards');
                } catch (error) {
                    alert(`Ошибка входа: ${error.message}`);
                }
            }
            
            logout() {
                this.db.logoutUser();
                this.currentUser = null;
                this.updateUI();
                this.showPage('home');
            }
            
            createCard() {
                if (!this.currentUser) {
                    alert('Для создания карточки необходимо войти в систему');
                    this.showPage('login');
                    return;
                }
                
                const author = document.getElementById('book-author').value;
                const title = document.getElementById('book-title').value;
                const type = document.querySelector('input[name="card-type"]:checked').value;
                
                if (!author || !title) {
                    alert('Пожалуйста, заполните все обязательные поля');
                    return;
                }
                
                const card = {
                    userId: this.currentUser.id,
                    author: author,
                    title: title,
                    type: type
                };
                
                try {
                    this.db.createCard(card);
                    document.getElementById('card-form').reset();
                    this.showPage('cards');
                    alert('Карточка успешно создана и отправлена на рассмотрение администратору!');
                } catch (error) {
                    alert(`Ошибка создания карточки: ${error.message}`);
                }
            }
            
            loadUserCards(filter = 'all') {
                const container = document.getElementById('cards-container');
                container.innerHTML = '';
                
                if (!this.currentUser) return;
                
                let cards = this.db.getUserCards(this.currentUser.id);
                
                if (filter !== 'all') {
                    cards = cards.filter(card => card.status === filter);
                }
                
                if (cards.length === 0) {
                    container.innerHTML = '<div class="form-container"><p>У вас пока нет карточек.</p></div>';
                    return;
                }
                
                cards.forEach(card => {
                    const user = this.currentUser;
                    const initials = user.fullName.split(' ').map(n => n[0]).join('');
                    
                    const cardElement = document.createElement('div');
                    cardElement.className = 'card';
                    cardElement.innerHTML = `
                        <div class="card-header">
                            <h3>${card.title}</h3>
                            <div class="card-type">${card.type === 'share' ? 'Готов поделиться' : 'Ищу книгу'}</div>
                        </div>
                        <div class="card-body">
                            <div class="card-author">${card.author}</div>
                            <div class="card-user">
                                <div class="user-avatar">${initials}</div>
                                <div>${user.fullName}</div>
                            </div>
                        </div>
                        <div class="card-footer">
                            <div>
                                <span class="status status-${card.status}">${
                                    card.status === 'pending' ? 'На рассмотрении' : 
                                    card.status === 'published' ? 'Опубликовано' : 
                                    card.status === 'rejected' ? 'Отклонено' : 'Архивная'
                                }</span>
                            </div>
                            <button class="btn btn-sm btn-danger delete-card" data-id="${card.id}">Удалить</button>
                        </div>
                    `;
                    
                    if (card.status === 'rejected' && card.rejectionReason) {
                        const reasonElement = document.createElement('div');
                        reasonElement.className = 'rejection-reason';
                        reasonElement.innerHTML = `<strong>Причина отклонения:</strong> ${card.rejectionReason}`;
                        cardElement.querySelector('.card-body').appendChild(reasonElement);
                    }
                    
                    container.appendChild(cardElement);
                });
                
                // Обработчики для кнопок удаления
                document.querySelectorAll('.delete-card').forEach(btn => {
                    btn.addEventListener('click', () => {
                        const id = parseInt(btn.getAttribute('data-id'));
                        if (confirm('Вы уверены, что хотите удалить эту карточку?')) {
                            this.db.deleteCard(id);
                            this.loadUserCards(filter);
                        }
                    });
                });
            }
            
            loadAdminCards() {
                const container = document.getElementById('admin-cards');
                container.innerHTML = '';
                
                const cards = this.db.getAllCards();
                const users = this.db.getUsers();
                
                if (cards.length === 0) {
                    container.innerHTML = '<tr><td colspan="7" style="text-align: center;">Нет карточек для рассмотрения</td></tr>';
                    return;
                }
                
                cards.forEach(card => {
                    const user = users.find(u => u.id === card.userId) || {};
                    
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${card.id}</td>
                        <td>${card.author}</td>
                        <td>${card.title}</td>
                        <td>${card.type === 'share' ? 'Готов поделиться' : 'Ищу книгу'}</td>
                        <td>${user.fullName || 'Неизвестный пользователь'}</td>
                        <td><span class="status status-${card.status}">${
                            card.status === 'pending' ? 'На рассмотрении' : 
                            card.status === 'published' ? 'Опубликовано' : 
                            card.status === 'rejected' ? 'Отклонено' : 'Архивная'
                        }</span></td>
                        <td class="action-buttons">
                            <button class="btn btn-success btn-sm publish-card" data-id="${card.id}">Опубликовать</button>
                            <button class="btn btn-danger btn-sm reject-card" data-id="${card.id}">Отклонить</button>
                            <button class="btn btn-sm archive-card" data-id="${card.id}">В архив</button>
                        </td>
                    `;
                    
                    container.appendChild(row);
                });
                
                // Обработчики для кнопок действий
                document.querySelectorAll('.publish-card').forEach(btn => {
                    btn.addEventListener('click', () => {
                        const id = parseInt(btn.getAttribute('data-id'));
                        this.db.updateCardStatus(id, 'published');
                        this.loadAdminCards();
                        alert('Карточка опубликована!');
                    });
                });
                
                document.querySelectorAll('.reject-card').forEach(btn => {
                    btn.addEventListener('click', () => {
                        const id = parseInt(btn.getAttribute('data-id'));
                        this.currentRejectionCardId = id;
                        document.getElementById('rejection-reason').value = '';
                        document.getElementById('rejection-modal').style.display = 'flex';
                    });
                });
                
                document.querySelectorAll('.archive-card').forEach(btn => {
                    btn.addEventListener('click', () => {
                        const id = parseInt(btn.getAttribute('data-id'));
                        this.db.archiveCard(id);
                        this.loadAdminCards();
                        alert('Карточка перемещена в архив!');
                    });
                });
            }
        }

        // Инициализация приложения после загрузки страницы
        document.addEventListener('DOMContentLoaded', () => {
            const app = new BookwormApp();
        });
    </script>
</body>
</html>
